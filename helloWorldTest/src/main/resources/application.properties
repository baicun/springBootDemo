#profiles指定运行环境
#spring.profiles.active=dev
#Tomcat运行服务端口
server.port=80
#访问路径：http://localhost/baicun/show?mid=baicun
#server.servlet.context-path=/baicun
#spring容器进行处理
spring.messages.basename=i18n/Messages,i18n/Pages
#thymeleaf配置
#spring.thymeleaf.suffix=.html
#spring.thymeleaf.prefix=classpath:/templates/
#文件上传配置(启用servlet上传；设置单个文件大小；设置最大的请求的文件大小，总体大小；当文件大小达到配置时写入磁盘；上传的临时目录)
#spring.servlet.multipart.enabled=true
#spring.servlet.multipart.max-file-size=1MB
#spring.servlet.multipart.max-request-size=20MB
#spring.servlet.multipart.file-size-threshold=512KB
#spring.servlet.multipart.location=/
# druid配置
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url = jdbc:mysql://192.168.100.103:3306/ccx_decision?useUnicode=true&amp;characterEncoding=utf8&allowMultiQueries=true
spring.datasource.username = u_decision
spring.datasource.password = cYyCp5vx6YyNqSOD
spring.datasource.initialSize=5  
spring.datasource.minIdle=5  
spring.datasource.maxActive=50
spring.datasource.maxWait=60000  
spring.datasource.timeBetweenEvictionRunsMillis=60000 
spring.datasource.minEvictableIdleTimeMillis=300000  
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true 
spring.datasource.testOnBorrow=true
spring.datasource.testOnReturn=false
spring.datasource.poolPreparedStatements=false  
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20 
# 配合Druid监控的过滤配置filters ,去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall,log4j 
# connectProperties
spring.datasources.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# Mybatis配置
# Mybatis所有操作类的别名所在包
mybatis.typeAliasesPackage=com.example.demo.bean
# Mybatis所有的映射文件
mybatis.mapperLocations=classpath:mapper/**/*.xml
# Mybatis配置文件所在路径
mybatis.config-location=classpath:mybatis-config.xml
# ####################activemq 配置 start
# 配置消息的类型，如果是true则表示为topic消息，如果为false表示Queue消息
#spring.jms.pub-sub-domain=false
# 连接用户名
#spring.activemq.user=activemq
# 连接密码
#spring.activemq.password=activemq
# 消息组件的连接主机信息
#spring.activemq.broker-url=tcp://activemq-server:61616
# ####################activemq 配置 end
# redis 配置 start
#spring.redis.host=localhost
#spring.redis.port=6379
#spring.redis.password=redis
#spring.redis.timeout=1000
#spring.redis.database=0
#spring.redis.jedis.pool.max-active=10
#spring.redis.jedis.pool.max-idle=8
#spring.redis.jedis.pool.min-idle=2
#spring.redis.jedis.pool.max-wait=100
# redis 配置 end
#################### eureka-client 配置 start #################
#eureka.client.serviceUrl.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/
eureka.client.serviceUrl.defaultZone=http://eureka-server:999/eureka/
# 当前微服务名称
spring.application.name=helloWorldApplication
# 注册列表显示主机名称
eureka.instance.instance-id=helloWorld.com
# 使上面的主机名称可以点击
eureka.instance.prefer-ip-address=true
# 指定服务注册中心的地址
# 微服务客户端之所以可以与 Eureka 之间保持联系，依靠的是心跳机制 # 设置心跳的时间间隔（默认是30秒）
eureka.instance.lease-renewal-interval-in-seconds: 2
# 如果现在超过了5秒的间隔（默认是90秒）,
# 表示距离上一次发送心跳之后等待下一次发送心跳的间隔时间，如果超过了此间隔时间，则认为该微服务已经宕机了。
eureka.instance.lease-expiration-duration-in-seconds: 5
# false, 代表不向注册中心注册自己。
#eureka.client.register-with-eureka=false
# 注册中心的职责就是维护服务实例，它并不需要去检索服务,设置为 false
#eureka.client.fetch-registry=false
#################### eureka-client 配置 end #################